import logging
logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)
import os
from collections import defaultdict
import utils
import gensim
from gensim.utils import simple_preprocess
from gensim.parsing.preprocessing import STOPWORDS


CATEGORY = utils.CATEGORY
# CATEGORY_NAME = utils.getCategoryName()
CATEGORY_NAME = 'reference'


def tokenizer(text):
    return [token for token in simple_preprocess(text) if token not in STOPWORDS]


# load corpus and word2id dictionary from disk
if not os.path.exists('src/{}/corpus/documents_{}.txt'.format(CATEGORY_NAME, CATEGORY_NAME)):
    logging.error("documents file was not generated.")
    exit(1)
else:
    logging.info("read file generated by getDocuments.py")

texts = []
with open('src/{}/corpus/documents_{}.txt'.format(CATEGORY_NAME, CATEGORY_NAME), 'r') as file:
    for line in file:
        texts.append(tokenizer(line))

# count token frequency
frequency = defaultdict(int)
for text in texts:
    for token in text:
        frequency[token] += 1
# eliminate tokens which appear only once
texts = [[token for token in text if frequency[token] > 1] for text in texts]


dictionary = gensim.corpora.Dictionary(texts)
dictionary.save('src/{}/corpus/id2word_{}.dict'.format(CATEGORY_NAME, CATEGORY_NAME))
corpus = [dictionary.doc2bow(text) for text in texts]
gensim.corpora.MmCorpus.serialize('src/{}/corpus/corpus_{}.mm'.format(CATEGORY_NAME, CATEGORY_NAME), corpus)
# print(dictionary)
# print(corpus)



# transform text into word2id corpus files without preprocessing
# corpus = gensim.corpora.TextCorpus('src/{}/corpus/corpus_file_{}.txt'.format(CATEGORY_NAME, CATEGORY_NAME))
# dictionary = corpus.dictionary
# dictionary.save('src/{}/corpus/id2word_{}.dict'.format(CATEGORY_NAME, CATEGORY_NAME))
# gensim.corpora.MmCorpus.serialize('src/{}/corpus/corpus_{}.mm'.format(CATEGORY_NAME, CATEGORY_NAME), corpus)   # store corpus to disk in Market Matrix format

# # following are alternative formats to store the corpus file
# ####################
# # gensim.corpora.SvmLightCorpus.serialize('src/{}/corpus/corpus_{}.svmlight'.format(CATEGORY_NAME, CATEGORY_NAME), corpus)    # store in Joachim's SVMlight format
# # gensim.corpora.BleiCorpus.serialize('src/{}/corpus/corpus_{}.lda-c'.format(CATEGORY_NAME, CATEGORY_NAME), corpus)   # store in Blei's LDA-C format
# # gensim.corpora.LowCorpus.serialize('src/{}/corpus/corpus_{}.low'.format(CATEGORY_NAME, CATEGORY_NAME), corpus)  # store in GibbsLDA++ format
# ###################
